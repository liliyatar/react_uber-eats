{"version":3,"sources":["store/actions.js","store/index.js","components/RestaurantsListPage/RestaurantsListPage.js","store/selectors.js","components/RestaurantsListPage/index.js","App.js","index.js"],"names":["ACTION_TYPES","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middlewares","thunk","initialState","restaurantsListData","store","createStore","state","arguments","length","undefined","action","type","Object","objectSpread2","payload","applyMiddleware","apply","RestaurantsListPage","_ref","restaurantsData","loadRestaurants","useEffect","react_default","a","createElement","JSON","stringify","defaultProps","selectRestaurantsList","createSelector","feedItems","storesMap","map","_ref2","uuid","mapDispatchToProps","dispatch","fetch","then","response","json","data","saveRestaurants","Enhanced","connect","App","es","className","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"mOAAaA,EACO,mBCGdC,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAc,CAACC,KAEfC,EAAe,CACnBC,oBAAqB,MAiBVC,EAAQC,YAdL,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBL,EAAcQ,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOC,MACb,KAAKhB,EACH,OAAOiB,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEH,oBAAqBO,EAAOI,UAIhC,QACE,OAAOR,IAMXV,EAAiBmB,IAAeC,WAAf,EAAmBhB,KCxBzBiB,EAAsB,SAAAC,GAA0C,IAAvCC,EAAuCD,EAAvCC,gBAAiBC,EAAsBF,EAAtBE,gBAKrD,OAJAC,oBAAU,WACRD,KACC,IAGDE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACGC,KAAKC,UAAUP,EAAiB,KAAM,MAW/CF,EAAoBU,aAAe,CACjCR,gBAAiB,gBCnBNS,EAAwBC,YAFhB,SAAAvB,GAAK,OAAIA,GAI5B,SAAAY,GAA6B,IAA1Bf,EAA0Be,EAA1Bf,oBACD,IAAKA,EACH,MAAO,GAFkB,IAKnB2B,EAAyB3B,EAAzB2B,UAAWC,EAAc5B,EAAd4B,UAEnB,OAAOD,EAAUE,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAAcH,EAAUG,OCJ3CC,EAAqB,CACzBf,gBJD6B,kBAAM,SAACgB,GACpCC,MAAM,+DACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAApB,GAAc,IAAXuB,EAAWvB,EAAXuB,KACPL,EATkB,SAAAK,GAAI,MAAK,CAC/B9B,KAAMhB,EACNmB,QAAS2B,GAOIC,CAAgBD,SIAzBE,EAAWC,YARO,SAAAtC,GAAK,MAAK,CAChCa,gBAAiBS,EAAsBtB,KASvC6B,EAFeS,CAGf3B,GCFa4B,EARH,kBACVvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAU1C,MAAOA,GACfkB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,QACbzB,EAAAC,EAAAC,cAACmB,EAAD,SCLNK,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b72543b1.chunk.js","sourcesContent":["export const ACTION_TYPES = {\n  SAVE_RESTAURANTS: 'SAVE_RESTAURANTS',\n};\n\nconst saveRestaurants = data => ({\n  type: ACTION_TYPES.SAVE_RESTAURANTS,\n  payload: data,\n});\n\nexport const loadRestaurants = () => (dispatch) => {\n  fetch('https://mate-uber-eats-api.herokuapp.com/api/v1/restaurants')\n    .then(response => response.json())\n    .then(({ data }) => {\n      dispatch(saveRestaurants(data));\n    });\n};\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { ACTION_TYPES } from './actions';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middlewares = [thunk];\n\nconst initialState = {\n  restaurantsListData: null,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.SAVE_RESTAURANTS: {\n      return {\n        ...state,\n        restaurantsListData: action.payload,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(...middlewares))\n);\n","import React, { useEffect } from 'react';\nimport Proptypes from 'prop-types';\n\nexport const RestaurantsListPage = ({ restaurantsData, loadRestaurants }) => {\n  useEffect(() => {\n    loadRestaurants();\n  }, []);\n\n  return (\n    <div>\n      <pre>\n        {JSON.stringify(restaurantsData, null, 4)}\n      </pre>\n    </div>\n  );\n};\n\nRestaurantsListPage.propTypes = {\n  restaurantsData: Proptypes.arrayOf(Proptypes.shape({})),\n  loadRestaurants: Proptypes.func.isRequired,\n};\n\nRestaurantsListPage.defaultProps = {\n  restaurantsData: [],\n};\n","import { createSelector } from 'reselect';\n\nconst rootSelector = state => state;\n\nexport const selectRestaurantsList = createSelector(\n  rootSelector,\n  ({ restaurantsListData }) => {\n    if (!restaurantsListData) {\n      return [];\n    }\n\n    const { feedItems, storesMap } = restaurantsListData;\n\n    return feedItems.map(({ uuid }) => storesMap[uuid]);\n  },\n);\n","import { connect } from 'react-redux';\nimport { RestaurantsListPage } from './RestaurantsListPage';\nimport { loadRestaurants } from '../../store/actions';\nimport { selectRestaurantsList } from '../../store/selectors';\n\nconst mapStateToProps = state => ({\n  restaurantsData: selectRestaurantsList(state),\n});\n\nconst mapDispatchToProps = {\n  loadRestaurants,\n};\n\nconst Enhanced = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(RestaurantsListPage);\n\nexport { Enhanced as RestaurantsListPage };\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.css';\nimport { store } from './store';\nimport { RestaurantsListPage } from './components/RestaurantsListPage';\n\nconst App = () => (\n  <Provider store={store}>\n    <div className=\"page\">\n      <RestaurantsListPage />\n    </div>\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}